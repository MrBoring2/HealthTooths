// <auto-generated />
using System;
using HealthyTeethAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthyTeethAPI.Migrations
{
    [DbContext(typeof(HealphyTeethContext))]
    [Migration("20211220190832_dasfasf")]
    partial class dasfasf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthyToothsModels.Cabinet", b =>
                {
                    b.Property<int>("CabinetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CabinetNumber")
                        .HasColumnType("int");

                    b.HasKey("CabinetId");

                    b.ToTable("Cabinet");
                });

            modelBuilder.Entity("HealthyToothsModels.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClientDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientFullName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("ClientGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("HealthyToothsModels.ClientsVisit", b =>
                {
                    b.Property<int>("ClientVisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ClientVisitId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("ClientsVisit");
                });

            modelBuilder.Entity("HealthyToothsModels.Consumable", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsumableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ConsumableTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ConsumableId");

                    b.HasIndex("ConsumableTypeId");

                    b.ToTable("Consumable");
                });

            modelBuilder.Entity("HealthyToothsModels.ConsumableType", b =>
                {
                    b.Property<int>("ConsumableTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsumableTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ConsumableTypeId");

                    b.ToTable("ConsumableType");
                });

            modelBuilder.Entity("HealthyToothsModels.ConsumablesInDelivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("DeliveryId", "ConsumableId");

                    b.HasIndex("ConsumableId");

                    b.ToTable("ConsumablesInDelivery");
                });

            modelBuilder.Entity("HealthyToothsModels.ConsumablesInStorage", b =>
                {
                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("StorageId", "ConsumableId");

                    b.HasIndex("ConsumableId");

                    b.ToTable("ConsumablesInStorages");
                });

            modelBuilder.Entity("HealthyToothsModels.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryId");

                    b.HasIndex("StorageId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("HealthyToothsModels.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HealthyToothsModels.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime");

                    b.HasKey("RecordId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("HealthyToothsModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("HealthyToothsModels.SpentConsumablesForVisit", b =>
                {
                    b.Property<int>("СonsumableId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("СonsumableId", "VisitId");

                    b.HasIndex("VisitId");

                    b.ToTable("SpentConsumablesForVisit");
                });

            modelBuilder.Entity("HealthyToothsModels.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StorageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StorageId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("HealthyToothsModels.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("HealthyToothsModels.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitType");
                });

            modelBuilder.Entity("HealthyToothsModels.Administrator", b =>
                {
                    b.HasBaseType("HealthyToothsModels.Employee");

                    b.Property<string>("PersonalKey")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("HealthyToothsModels.Doctor", b =>
                {
                    b.HasBaseType("HealthyToothsModels.Employee");

                    b.Property<int>("CabinetId")
                        .HasColumnType("int");

                    b.HasIndex("CabinetId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("HealthyToothsModels.ClientsVisit", b =>
                {
                    b.HasOne("HealthyToothsModels.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.Doctor", "Doctor")
                        .WithMany("ClientsVisits")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.VisitType", "VisitType")
                        .WithMany("ClientsVisits")
                        .HasForeignKey("VisitTypeId")
                        .HasConstraintName("FK_ClientsVisit_VisitType")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Doctor");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("HealthyToothsModels.Consumable", b =>
                {
                    b.HasOne("HealthyToothsModels.ConsumableType", "ConsumableType")
                        .WithMany("Consumables")
                        .HasForeignKey("ConsumableTypeId")
                        .HasConstraintName("FK_Consumable_ConsumableType")
                        .IsRequired();

                    b.Navigation("ConsumableType");
                });

            modelBuilder.Entity("HealthyToothsModels.ConsumablesInDelivery", b =>
                {
                    b.HasOne("HealthyToothsModels.Consumable", "Consumable")
                        .WithMany("ConsumablesInDeliveries")
                        .HasForeignKey("ConsumableId")
                        .HasConstraintName("FK_ConsumablesInDelivery_Consumable")
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.Delivery", "Delivery")
                        .WithMany("ConsumablesInDeliveries")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("FK_ConsumablesInDelivery_Delivery")
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("HealthyToothsModels.ConsumablesInStorage", b =>
                {
                    b.HasOne("HealthyToothsModels.Consumable", "Consumable")
                        .WithMany("ConsumablesInStorages")
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.Storage", "Storage")
                        .WithMany("ConsumablesInStorages")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("HealthyToothsModels.Delivery", b =>
                {
                    b.HasOne("HealthyToothsModels.Storage", "Storage")
                        .WithMany("Deliveries")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.Supplier", "Supplier")
                        .WithMany("Deliveries")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Delivery_Supplier")
                        .IsRequired();

                    b.Navigation("Storage");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("HealthyToothsModels.Employee", b =>
                {
                    b.HasOne("HealthyToothsModels.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HealthyToothsModels.Record", b =>
                {
                    b.HasOne("HealthyToothsModels.Client", "Client")
                        .WithMany("Records")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Record_Client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.Doctor", "Doctor")
                        .WithMany("Records")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthyToothsModels.SpentConsumablesForVisit", b =>
                {
                    b.HasOne("HealthyToothsModels.ClientsVisit", "Visit")
                        .WithMany("SpentConsumablesForVisits")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_SpentConsumablesForVisit_ClientsVisit")
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.Consumable", "Сonsumable")
                        .WithMany("SpentConsumablesForVisits")
                        .HasForeignKey("СonsumableId")
                        .HasConstraintName("FK_SpentConsumablesForVisit_Consumable")
                        .IsRequired();

                    b.Navigation("Сonsumable");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("HealthyToothsModels.Administrator", b =>
                {
                    b.HasOne("HealthyToothsModels.Employee", null)
                        .WithOne()
                        .HasForeignKey("HealthyToothsModels.Administrator", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyToothsModels.Doctor", b =>
                {
                    b.HasOne("HealthyToothsModels.Cabinet", "Cabinet")
                        .WithMany("Doctors")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyToothsModels.Employee", null)
                        .WithOne()
                        .HasForeignKey("HealthyToothsModels.Doctor", "EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("HealthyToothsModels.Cabinet", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HealthyToothsModels.Client", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("HealthyToothsModels.ClientsVisit", b =>
                {
                    b.Navigation("SpentConsumablesForVisits");
                });

            modelBuilder.Entity("HealthyToothsModels.Consumable", b =>
                {
                    b.Navigation("ConsumablesInDeliveries");

                    b.Navigation("ConsumablesInStorages");

                    b.Navigation("SpentConsumablesForVisits");
                });

            modelBuilder.Entity("HealthyToothsModels.ConsumableType", b =>
                {
                    b.Navigation("Consumables");
                });

            modelBuilder.Entity("HealthyToothsModels.Delivery", b =>
                {
                    b.Navigation("ConsumablesInDeliveries");
                });

            modelBuilder.Entity("HealthyToothsModels.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HealthyToothsModels.Storage", b =>
                {
                    b.Navigation("ConsumablesInStorages");

                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("HealthyToothsModels.Supplier", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("HealthyToothsModels.VisitType", b =>
                {
                    b.Navigation("ClientsVisits");
                });

            modelBuilder.Entity("HealthyToothsModels.Doctor", b =>
                {
                    b.Navigation("ClientsVisits");

                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
